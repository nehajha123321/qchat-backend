import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as logs from 'aws-cdk-lib/aws-logs';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as glue from 'aws-cdk-lib/aws-glue';
import * as athena from 'aws-cdk-lib/aws-athena';
import * as fs from 'fs';

export class CdkStack extends cdk.Stack {
  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const vpcId = new cdk.CfnParameter(this, 'vpcId', {
      type: 'AWS::EC2::VPC::Id',
      description: 'VPC ID to create resources in'
    });

    const vpc = ec2.Vpc.fromVpcAttributes(this, 'VPC', {
      vpcId: vpcId.valueAsString,
      availabilityZones: ['us-east-1a', 'us-east-1b']
    });

    const flowLogBucket = new s3.Bucket(this, 'XXXXXXXXXXXXX', {
      bucketName: 'XXXXXXXXXXXXXX' + this.account + '-' + this.region,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
      lifecycleRules: [
        {
          enabled: true,
          transitions: [
            {
              storageClass: s3.StorageClass.GLACIER,
              transitionAfter: cdk.Duration.days(30)
            }
          ]
        }
      ]
    });

    const flowLogLogGroup = new logs.LogGroup(this, 'FlowLogGroup', {
      logGroupName: '/aws/vpc/flow-log/' + vpc.vpcId,
      removalPolicy: cdk.RemovalPolicy.DESTROY
    });

    const flowLog = new ec2.FlowLog(this, 'FlowLog', {
      resourceType: ec2.FlowLogResourceType.fromVpc(vpc),
      trafficType: ec2.TrafficType.ALL,
      logFormat: ec2.LogFormat.parquetCompressedLogs(),
      destination: ec2.LogDestination.toS3(flowLogBucket, flowLogLogGroup, '#{partitionKeyFromTime}/#{format(provider.id)}')
    });

    const flowLogRole = new iam.Role(this, 'FlowLogGlueRole', {
      assumedBy: new iam.ServicePrincipal('glue.amazonaws.com')
    });

    flowLogBucket.grantReadWrite(flowLogRole);

    const flowLogDatabase = new glue.Database(this, 'FlowLogDatabase', {
      databaseName: 'vpc_flow_logs'
    });

    const crawler = new glue.CfnCrawler(this, 'Crawler', {
      role: flowLogRole.roleArn,
      databaseName: flowLogDatabase.databaseName,
      targets: {
        s3Targets: [{
          path: 's3://' + flowLogBucket.bucketName
        }]
      }
    });

    const queryResults = fs.readFileSync('/app/projects/acumen/_assets/sql-query.sql', 'utf8');

    const table = new athena.CfnTable(this, 'AthenaTable', {
      databaseName: flowLogDatabase.databaseName,
      tableName: 'vpc_flow_logs',
      bucketName: flowLogBucket.bucketName,
      dataFormat: 'PARQUET',
      workGroupName: 'primary'
    });

    const queryOutput = table.athenaQuery(queryResults);

    new cdk.CfnOutput(this, 'QueryOutput', {
      value: JSON.stringify(queryOutput),
      description: 'Query results in JSON format'
    });
  }
}
